type Query {
  imgSearch(searchTerm: String): [Sticker!]!
  tagSearch(searchKey: String, num: Int): [TagSearchResponseItem!]!
  ownStickers(ownerID: ID!): [OwnStickersResponseItem!]!
  ownTags(ownerID: ID!): [Tag!]!
}

type Mutation {
  login(arg: LoginInput!): LoginResponse!
  register(arg: RegisterInput!): LoginResponse!
  createTag(arg: CreateTagInput!): GeneralResponse!
  subscribeTag(arg: SubscribeTagInput!): GeneralResponse!
  cancelSubscribeTag(arg: CancelSubscribeTagInput!): GeneralResponse!
  kickSubscribers(arg: KickSubscribersInput!): GeneralResponse!
  deleteTag(arg: DeleteTagInput!): GeneralResponse!
  uploadSticker(arg: UploadStickerInput!): GeneralResponse!
  updateSticker(arg: UpdateStickerInput!): GeneralResponse!
  deleteSticker(arg: DeleteStickerInput!): GeneralResponse!
}

type Subscription {
  login(arg: LoginInput!): GeneralResponse!
}

type User {
  userID: ID!
  password: String!
  name: String!
  ownStickerIDs: [ID!]!
  ownTagIDs: [ID!]!
  subscribedTagIDs: [ID!]!
}

type Tag {
  tagID: ID!
  ownerID: ID!
  stickerIDs: [ID!]!
  subscriberIDs: [ID!]!
  key: String!
}

type Sticker {
  stickerID: ID!
  ownerID: ID!
  tagIDs: [ID!]!
  description: String!
  type: String!
}

type UserInfo {
  userID: ID!
  name: String!
}

type TagInfo {
  tagID: ID!
  ownerID: ID!
  key: String!
}

type GeneralResponse {
  success: Boolean!
  message: String!
}

type TagSearchResponseItem {
  tagID: ID!
  key: String!
  owner: UserInfo!
}

type OwnStickersResponseItem {
  stickerID: ID!
  tags: [TagInfo!]!
  description: String!
  type: String!
}

input LoginInput {
  userID: ID!
  password: String!
}

type LoginResponse {
  success: Boolean!
  message: String!
  userID: ID
  name: String
  ownTagIDs: [ID!]
  subscribedTagIDs: [ID!]
  sessionID: ID
}

input RegisterInput {
  userID: ID!
  password: String!
  name: String!
}

input CreateTagInput {
  userID: ID!
  sessionID: ID!
  tagID: ID!
  key: String!
}

input SubscribeTagInput {
  userID: ID!
  sessionID: ID!
  tagID: ID!
}

input CancelSubscribeTagInput {
  userID: ID!
  sessionID: ID!
  tagID: ID!
}

input KickSubscribersInput {
  userID: ID!
  sessionID: ID!
  tagID: ID!
  kickUserIDs: [ID!]!
}

input DeleteTagInput {
  userID: ID!
  sessionID: ID!
  tagID: ID!
}

input UploadStickerInput {
  userID: ID!
  sessionID: ID!
  stickerID: ID!
  description: String!
  type: String!
}

input UpdateStickerInput {
  userID: ID!
  sessionID: ID!
  stickerID: ID!
  description: String
  tagIDs: [ID!]
}

input DeleteStickerInput {
  userID: ID!
  sessionID: ID!
  stickerID: ID!
}